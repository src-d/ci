# Default shell
SHELL := /bin/bash

# Package configuration
PROJECT ?=
COMMANDS ?=
DEPENDENCIES ?=
DOCKERFILES ?= Dockerfile:$(PROJECT)
PRERUN ?=
POSTRUN ?=
RACE_ENABLED ?=
GOFLAGS ?=

# Docker configuration
DOCKER_ORG ?=
DOCKER_USERNAME ?=
DOCKER_PASSWORD ?=
DOCKER_REGISTRY ?= docker.io

# Checking mandatory variables
ifndef PROJECT
$(error ERROR! The PROJECT variable cannot be empty)
endif

# Environment
WORKDIR := $(PWD)
BUILD_PATH := $(WORKDIR)/build
BUILD ?= $(shell date +"%m-%d-%Y_%H_%M_%S")
COMMIT ?= $(shell git log --format='%H' -n 1 | cut -c1-10)
BRANCH ?= $(shell git rev-parse --abbrev-ref HEAD)

# travis CI
ifeq ($(TRAVIS), true)
	COMMIT := $(shell echo $(TRAVIS_COMMIT) | cut -c1-10)
	BRANCH := $(TRAVIS_BRANCH)
	TAG := $(TRAVIS_TAG)
	WORKDIR := $(TRAVIS_BUILD_DIR)
	BUILD_PATH := $(WORKDIR)/build
endif

# drone CI
ifeq ($(DRONE), true)
	COMMIT := $(shell echo $(DRONE_COMMIT) | cut -c1-10)
	BRANCH := $(DRONE_BRANCH)
	TAG := $(DRONE_TAG)
endif

# Packages content
PKG_OS ?= darwin linux
PKG_ARCH = amd64

# Go parameters
GOCMD = go
GOBUILD = $(GOCMD) build $(GOFLAGS)
GOCLEAN = $(GOCMD) clean
GOINSTALL = $(GOCMD) install -v $(GOFLAGS)
GOGET = $(GOCMD) get -v -t
GOTEST = $(GOCMD) test -v $(GOFLAGS)
CGO_ENABLED ?= 0

# Coverage
COVERAGE_REPORT = coverage.txt
COVERAGE_PROFILE = profile.out
COVERAGE_MODE = atomic

# Glide
GLIDE_LOCK = glide.lock
ifneq ("$(wildcard $(GLIDE_LOCK))","")
VENDOR_PATH = $(WORKDIR)/vendor
GLIDE = glide
DEPENDENCIES += github.com/Masterminds/glide
else
VENDOR_PATH =
endif

PACKAGES = $(shell go list ./... | grep -v '/vendor/')

# Rules

.PHONY: $(DEPENDENCIES) $(PACKAGES) dependencies docker-push docker-push-latest packages test test-coverage pre-run post-run clean

$(DEPENDENCIES):
	$(GOGET) $@/...

$(VENDOR_PATH): $(GLIDE_LOCK)
	$(GLIDE) install

$(PACKAGES): $(VENDOR_PATH)
	$(GOGET) $@

dependencies: $(DEPENDENCIES) $(VENDOR_PATH) $(PACKAGES)

docker-push:
	@if [ "$(BRANCH)" == "master" ]; then \
		exit; \
	fi; \
	if [ -z "$(DOCKER_ORG)" ]; then \
		echo "DOCKER_ORG variable cannot be empty."; \
		exit 1; \
	fi; \
	if [ -z "$(DOCKER_USERNAME)" ]; then \
		echo "DOCKER_USERNAME variable cannot be empty."; \
		exit 1; \
	fi; \
	if [ -z "$(DOCKER_PASSWORD)" ]; then \
		echo "DOCKER_PASSWORD variable cannot be empty."; \
		exit 1; \
	fi; \
	if [ ! -z "$(COMMANDS)" ]; then \
		cp -r $(BUILD_PATH)/$(PROJECT)_linux_amd64 bin; \
	fi; \
	docker login -u "$(DOCKER_USERNAME)" -p "$(DOCKER_PASSWORD)" $(DOCKER_REGISTRY); \
	for d in $(DOCKERFILES); do \
		dockerfile=`echo $${d} | cut -d":" -f 1`; \
		repository=`echo $${d} | cut -d":" -f 2`; \
		echo "Building dockerfile $$dockerfile for repository $$repository."; \
		docker build -t $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$${repository}:$(BRANCH) -f $(WORKDIR)/$$dockerfile . && \
		docker push $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$${repository}:$(BRANCH); \
		if [ $$? != 0 ]; then \
			echo "Something went wrong pushing the image."; \
			exit 1; \
		fi; \
		echo "Successfully uploaded image."; \
	done; \

docker-push-latest: docker-push
	for d in $(DOCKERFILES); do \
		dockerfile=`echo $${d} | cut -d":" -f 1`; \
		repository=`echo $${d} | cut -d":" -f 2`; \
		echo "Tagging $$dockerfile as latest for repository $$repository."; \
		docker tag $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$${repository}:$(TAG) $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$${repository}:latest; \
		if [ $$? != 0 ]; then \
			echo "Can't tag image."; \
			exit 1; \
		fi; \
		docker push $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$${repository}:latest; \
		if [ $$? != 0 ]; then \
			echo "Something went wrong pushing the latest image."; \
			exit 1; \
		fi; \
	done; \

packages:
	@for os in $(PKG_OS); do \
		for arch in $(PKG_ARCH); do \
			cd $(WORKDIR); \
			mkdir -p $(BUILD_PATH)/$(PROJECT)_$${os}_$${arch}; \
			for cmd in $(COMMANDS); do \
				if [ -d "$${cmd}" ]; then \
					cd $${cmd}; \
				fi; \
				CGO_ENABLED=$(CGO_ENABLED) GOOS=$${os} GOARCH=$${arch} $(GOBUILD) -ldflags \
				"-X main.version=$(TAG) -X main.build=$(BUILD) -X main.commit=$(COMMIT)" \
				-o "$(BUILD_PATH)/$(PROJECT)_$${os}_$${arch}/`basename $${PWD}`" .; \
				cd $(WORKDIR); \
			done; \
			cd $(BUILD_PATH); \
			tar -cvzf $(PROJECT)_$(TAG)_$${os}_$${arch}.tar.gz $(PROJECT)_$${os}_$${arch}/; \
		done; \
	done; \
	cp -r $(BUILD_PATH)/$(PROJECT)_linux_amd64 $(WORKDIR)/bin; \

post-run:
	@for script in $(POSTRUN); do \
		$(WORKDIR)/$${script}; \
	done; \

pre-run:
	@for script in $(PRERUN); do \
		$(WORKDIR)/$${script}; \
	done; \

test:
	$(GOTEST) $(PACKAGES)

test-coverage:
	@cd $(WORKDIR); \
	echo "" > $(COVERAGE_REPORT); \
	for dir in $(PACKAGES); do \
		if [ -z $(RACE_ENABLED) ]; then \
			$(GOTEST) $$dir -coverprofile=$(COVERAGE_PROFILE) -covermode=$(COVERAGE_MODE); \
		else \
			$(GOTEST) $$dir -race -coverprofile=$(COVERAGE_PROFILE) -covermode=$(COVERAGE_MODE); \
		fi; \
		if [ $$? != 0 ]; then \
			exit 2; \
		fi; \
		if [ -f $(COVERAGE_PROFILE) ]; then \
			cat $(COVERAGE_PROFILE) >> $(COVERAGE_REPORT); \
			rm $(COVERAGE_PROFILE); \
		fi; \
	done; \
	if [[ ! -z "$(CODECOV_TOKEN)" ]] ; then \
		args="-t $(CODECOV_TOKEN)"; \
	fi; \
	bash <(curl -s https://codecov.io/bash) $${args}; \

# This target checks if files in a repository have changed after code generation
# how to generate files is up to project
#
# Example:
#
# validate-commit: generate-assets no-changes-in-commit
#
# generate-assets:
#    yarn build
#    go-bindata dist
no-changes-in-commit:
	git status --untracked-files=no --porcelain | grep -qe '..*'; \
	if  [ $$? -eq 0 ] ; then \
		git diff|cat; \
		echo >&2 "generated assets are out of sync"; \
		exit 2; \
	fi

clean:
	rm -rf $(BUILD_PATH) $(VENDOR_PATH)
	$(GOCLEAN) .
